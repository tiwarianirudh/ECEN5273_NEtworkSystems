
  int read_bytes;



    if (argc != 2)
  	{
  		printf ("\nUsage: <conf file>\n");
  		exit(1);
  	}
    conf = argv[1];
    //scanf(" %[^\n]s",conf);

    parse_status = parse_file(&(parse), conf);
    if(parse_status==-1){
      printf("Error Parsing the Configuration File\n");
      exit(1);
    }

  while(1){
    printf("\n\n*******************Files in your folder*********************\n");
    system("ls");

    /* Display the availble commands for the user */
    printf("\n\tEnter Command as under: \n");
    printf("\t1. list \n" "\t2. get <filename>\n" "\t3. put <filename>\n");
    scanf(" %[^\n]s",command);	// store the command entered by the user

    cname = strdup(command);
    strtok(cname, " ");
    filename = strtok(NULL, " ");
    printf("Filename: %s\n", filename);

    char *hash_value = MD5sum(filename);
    if(hash_value == 0){
      printf("Error Opening file or it Does not exist\n");
      continue;
    }
    printf ("Hash Value in Main: %s\n\n", hash_value);

    int *hash_int = intMD5sum(hash_value);
    printf ("Hash Integer Value in Main: %d\n\n", *hash_int);

    x = (*hash_int)%4;
    printf("\n************\n");
    printf("MD5HASH%%4 value: %d\n", x );



    if(!strcmp(cname, "put")){
      printf("\n************\n");
      printf("Put File: \"%s\" on the server.\n", filename);

      strcpy(auth->username, *parse.username);
      strcpy(auth->password, *parse.password);
      strcpy(auth->command, cname);
      strcpy(auth->filename, filename);
      printf("Username:%sPassword:%sCommand:%sFilename:%s\n", auth->username, auth->password, auth->command, auth->filename );

      for(int i=0; i<4; i++){
        if((sockfd[i] = socket(AF_INET, SOCK_STREAM, 0)) < 0){
      		printf("Error in creating a socket for the Server:%s at Port: %d\n", parse.dfs[i], *parse.port_num[i]);
      	}
      	memset(&server_addr, 0, sizeof(server_addr));
      	server_addr.sin_family = AF_INET;
      	server_addr.sin_port = htons(*parse.port_num[i]);
      	server_addr.sin_addr.s_addr = inet_addr(parse.dfs_ip[i]);
        printf("\n\nSockfd %d: %d\n", i, sockfd[i]);
        printf("%d\n", *(parse).port_num[i]);
        printf("%s\n", (parse).dfs[i]);
        printf("%s\n", (parse).dfs_ip[i]);
      	if(connect(sockfd[i],(struct sockaddr *) &server_addr, sizeof(server_addr)) < 0)
      	{
          perror("Error: \n");
          printf("Error in Connecting to socket for the Server:%s at Port: %d\n", parse.dfs[i], *parse.port_num[i]);
          continue;
      	}

        if((nbytes = send(sockfd[i], auth, sizeof(*auth), 0)) < 0){
          printf("%d\n", nbytes);
          printf("Error in sending to socket for the Server:%s at Port: %d\n", parse.dfs[i], *parse.port_num[i]);
        }
        //printf("Nbytes Sent: %d\n", nbytes);
        bzero(buffer, MAXBUFSIZE);
        nbytes = 0;
        if((nbytes = recv(sockfd[i], buffer, sizeof(buffer), 0))<0){
          perror("Error: \n");
        }
        //for(int i=0; i<entry;i++){
        else printf("%s\n", buffer);
        //}
        if(!(strcmp(buffer, "User Exists" ))){
          printf("User Exists: Server Ready to Put File\n");

          FILE * fp_part;
          fp_part = fopen(filename, "rb");
          if(fp_part == NULL){
            perror("Error Opening File for sending to DFS: \n");
          }
          //printf("%lu\n", &(*fp) );
          fseek(fp_part, 0, SEEK_END);
          file_length = ftell(fp_part);
          fseek(fp_part, 0, SEEK_SET);
          //printf("%lu\n", &(*fp) );
          len_part = (file_length/4);
          len_part4 = len_part + (file_length%4);



          printf("File length: %lu\n", file_length );
          printf("first 3: %lu, last: %lu\n", len_part, len_part4 );

          // if(len_part%MAXBUFSIZE > 0){
          //   parts_iteration = (len_part/MAXBUFSIZE) + 1;
          // }
          // else{
            parts_iteration = (len_part/MAXBUFSIZE);
            printf("Iterations: %d\n", parts_iteration);
          // }
          // if(len_part4%MAXBUFSIZE > 0){
          //   parts_iteration4 = (len_part4/MAXBUFSIZE) + 1;
          // }
          // else{
            parts_iteration4 = (len_part4/MAXBUFSIZE);
          // }

          int part_map[4][4][2] = {
            {{1,2},{2,3},{3,4},{4,1}},
            {{4,1},{1,2},{2,3},{3,4}},
            {{3,4},{4,1},{1,2},{2,3}},
            {{2,3},{3,4},{4,1},{1,2}},
          };

          if(part_map[x][i][0]==1 || part_map[x][i][1]==1){
            bzero(buffer, MAXBUFSIZE);
            sprintf(buffer, "Part:1 %s %lu", filename, len_part);
       